// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModelsGetInitiatedNotificationResponse models get initiated notification response
//
// swagger:model models.GetInitiatedNotificationResponse
type ModelsGetInitiatedNotificationResponse struct {

	// body
	Body string `json:"body,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// external Id
	ExternalID string `json:"externalId,omitempty"`

	// header
	Header string `json:"header,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// notification type
	NotificationType *ModelsNotificationTypeResponse `json:"notificationType,omitempty"`

	// resource Id
	ResourceID string `json:"resourceId,omitempty"`

	// triggering user Id
	TriggeringUserID string `json:"triggeringUserId,omitempty"`
}

// Validate validates this models get initiated notification response
func (m *ModelsGetInitiatedNotificationResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNotificationType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsGetInitiatedNotificationResponse) validateNotificationType(formats strfmt.Registry) error {
	if swag.IsZero(m.NotificationType) { // not required
		return nil
	}

	if m.NotificationType != nil {
		if err := m.NotificationType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notificationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("notificationType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this models get initiated notification response based on the context it is used
func (m *ModelsGetInitiatedNotificationResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNotificationType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsGetInitiatedNotificationResponse) contextValidateNotificationType(ctx context.Context, formats strfmt.Registry) error {

	if m.NotificationType != nil {
		if err := m.NotificationType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notificationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("notificationType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsGetInitiatedNotificationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsGetInitiatedNotificationResponse) UnmarshalBinary(b []byte) error {
	var res ModelsGetInitiatedNotificationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
